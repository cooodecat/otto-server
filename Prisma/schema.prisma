// schema.prisma
datasource db {
    provider = "postgresql" // Supabase는 PostgreSQL 기반
    url      = env("DATABASE_URL") // .env 파일에서 Supabase DB URL 불러오기
}

generator client {
    provider = "prisma-client-js"
}

model JobExecution {
    id          String    @id @default(uuid())
    executionId String    @unique // 내부 실행 ID (서비스 공통 Run ID)
    provider    String // 'codebuild', 'codedeploy' 등
    externalId  String?   @unique // AWS CodeBuild Build ID or CodeDeploy Deployment ID
    projectName String
    status      String? // IN_PROGRESS / SUCCEEDED / FAILED
    startedAt   DateTime
    endedAt     DateTime?
    createdAt   DateTime  @default(now())

    // Relations
    logs       JobExecutionLog[]
    collection LogCollectionState?

    @@index([provider])
    @@index([startedAt(sort: Desc)])
}

model JobExecutionLog {
    id          String   @id @default(uuid())
    executionId String
    timestamp   DateTime
    phase       String? // INSTALL / BUILD / DEPLOY / VALIDATE …
    level       LogLevel
    message     String
    logStream   String?
    rawData     Json?
    createdAt   DateTime @default(now())

    // Relations
    execution JobExecution @relation(fields: [executionId], references: [executionId], onDelete: Cascade)

    @@index([executionId, timestamp(sort: Desc)])
    @@index([level])
}

model LogCollectionState {
    executionId      String           @id
    lastToken        String?
    lastCollectedAt  DateTime?
    collectionStatus CollectionStatus
    errorMessage     String?
    updatedAt        DateTime         @default(now())

    // Relations
    execution JobExecution @relation(fields: [executionId], references: [executionId], onDelete: Cascade)

    @@index([collectionStatus])
}

enum LogLevel {
    DEBUG
    INFO
    WARN
    ERROR
}

enum CollectionStatus {
    ACTIVE
    STOPPED
    ERROR
}
